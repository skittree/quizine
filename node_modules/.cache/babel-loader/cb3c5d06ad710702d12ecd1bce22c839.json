{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useMemo } from \"react\"; // export const useSortedClues = (clues, sort) => {\n//   const sortedClues = useMemo(() => {\n//     if (sort) {\n//       return [...clues].sort((a, b) => a[sort].localeCompare(b[sort]));\n//     }\n//     return clues;\n//   }, [sort, clues]);\n//   return sortedClues;\n// };\n\nexport const useCategories = (categories, sort, query) => {\n  _s();\n\n  // const sortedClues = useSortedClues(clues, sort);\n  const sortedCategories = categories;\n  const sortedAndSearchedCategories = useMemo(() => {\n    return sortedCategories.filter(category => category.title.toLowerCase().includes(query.toLowerCase()));\n  }, [query, sortedCategories]);\n  return sortedAndSearchedCategories;\n};\n\n_s(useCategories, \"BjyyKzgbAJd1L/kXrS2Rb1aiIq0=\");","map":{"version":3,"sources":["C:/Users/keenm/Desktop/Web Final Project/quizine/src/components/hooks/useCategories.js"],"names":["React","useMemo","useCategories","categories","sort","query","sortedCategories","sortedAndSearchedCategories","filter","category","title","toLowerCase","includes"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,OAAxB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,aAAa,GAAG,CAACC,UAAD,EAAaC,IAAb,EAAmBC,KAAnB,KAA6B;AAAA;;AACxD;AACA,QAAMC,gBAAgB,GAAGH,UAAzB;AACA,QAAMI,2BAA2B,GAAGN,OAAO,CAAC,MAAM;AAChD,WAAOK,gBAAgB,CAACE,MAAjB,CAAyBC,QAAD,IAC7BA,QAAQ,CAACC,KAAT,CAAeC,WAAf,GAA6BC,QAA7B,CAAsCP,KAAK,CAACM,WAAN,EAAtC,CADK,CAAP;AAGD,GAJ0C,EAIxC,CAACN,KAAD,EAAQC,gBAAR,CAJwC,CAA3C;AAMA,SAAOC,2BAAP;AACD,CAVM;;GAAML,a","sourcesContent":["import React from \"react\";\r\nimport { useMemo } from \"react\";\r\n\r\n// export const useSortedClues = (clues, sort) => {\r\n//   const sortedClues = useMemo(() => {\r\n//     if (sort) {\r\n//       return [...clues].sort((a, b) => a[sort].localeCompare(b[sort]));\r\n//     }\r\n//     return clues;\r\n//   }, [sort, clues]);\r\n//   return sortedClues;\r\n// };\r\n\r\nexport const useCategories = (categories, sort, query) => {\r\n  // const sortedClues = useSortedClues(clues, sort);\r\n  const sortedCategories = categories;\r\n  const sortedAndSearchedCategories = useMemo(() => {\r\n    return sortedCategories.filter((category) =>\r\n      category.title.toLowerCase().includes(query.toLowerCase())\r\n    );\r\n  }, [query, sortedCategories]);\r\n\r\n  return sortedAndSearchedCategories;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}